Dear SPARK Team,
 Here an issue/feature request that I discovered while working on SPARKNaCl.

This issue can be reproduced by checkout out the "Proof_Broken" tag of the SPARKNaCl GIT repo.

I was working on the SPARKNaCl.Car package, so I did

gnatprove -Psparknacl --report=fail src/sparknacl-car.adb

and I got:

sparknacl-car.adb:86:35: medium: range check might fail

Looking at that fragment of the source code:

81:      pragma Assert (R (0) >= I64(Seminormal_GF_LSL'First) and
82:                     R (0) <= I64(Seminormal_GF_LSL'Last));
83:      pragma Assert
84:        (for all K in Index_16 range 1 .. 15 => (R (K) in GF64_Normal_Limb));
85:
86:      return Seminormal_GF'(0  => Seminormal_GF_LSL (R (0)),
87:                            1  => GF32_Normal_Limb (R (1)),
88:                            2  => GF32_Normal_Limb (R (2)),
89:                            3  => GF32_Normal_Limb (R (3)),
-- and so on...

so that looks really odd... The range of R (0) is asserted on line 81 just fine, but then the range check on line 86 fails?

This got me stuck for quite a while...

I eventually resorted to looking a the output of the compiler with "-gnatG -gnatL" switched on, and I find for line 86:

-- 86:       return Seminormal_GF'(0  => Seminormal_GF_LSL (R (0)),
      R43b : constant sparknacl__gf64_any_limb := r (0);
      [constraint_error when
        not (R43b in 0 .. 132051011)
        "range check failed"]
      R44b : constant sparknacl__seminormal_gf_lsl :=
        sparknacl__seminormal_gf_lsl(R43b);
      [constraint_error when
        not (R44b in -16#1000_0# .. 16#1FFF_F#)
        "range check failed"]


Aha! So there are TWO range checks there on 1 line of code, but GNATprove doesn't tell me that, (or which one it is failing to prove...)

The reason for that is that Seminormal_GF_LSL is a subtype which has a Dynamic_Predicate aspect (the first range check) of a subtype which also has a range constraint (the second check).

Could GNATprove give a more useful error message here?

Perhaps it could at least say


sparknacl-car.adb:86:35: medium: range check (1 of 2) might fail

Ideally, I'd prefer

sparknacl-car.adb:86:35: medium: range check (R (0) in -16#1000_0# .. 16#1FFF_F#) might fail

which would tell me straight away what's wrong. If the compiler with -gnatG can produce that output, then I guess GNATprove could do the same?

Cheers,
 Rod
